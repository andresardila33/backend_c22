// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Employee {
//   id         String      @id @unique @default(uuid()) @db.Uuid
//   firstName  String      @db.VarChar(100)
//   lastName   String      @db.VarChar(100)
//   userName   String      @unique @db.VarChar(100)
//   password   String      @db.VarChar(60)
//   email      String      @unique @db.VarChar(100)
//   isActive   Boolean     @default(true)
//   createAt   DateTime    @default(now())
//   updatedAt  DateTime    @updatedAt
//   role       String[]    @default(["manager"]) @db.VarChar(10)
//   orderBills OrderBill[]

//   @@map("employee")
// }

model Role {
  id   String @id @unique @default(uuid()) @db.Uuid
  name String @db.VarChar(100)

  @@map("role")
}

model User {
  id         String      @id @unique @default(uuid()) @db.Uuid
  firstName  String      @db.VarChar(100)
  lastName   String      @db.VarChar(100)
  userName   String      @unique @db.VarChar(100)
  password   String      @unique
  email      String      @unique @db.VarChar(100)
  isActive   Boolean     @default(true) 
  role       String[]    @default(["manager"]) @db.VarChar(10)
  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderBills OrderBill[]

  @@map("user")
}

model Client {
  id         String      @id @unique @default(uuid()) @db.Uuid
  firstName  String      @db.VarChar(100)
  lastName   String      @db.VarChar(100)
  userName   String      @unique @db.VarChar(100)
  phone      String      @db.VarChar(20)
  createAt   DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderBills OrderBill[]

  @@map("client")
}

model Table {
  id          String      @id @unique @default(uuid()) @db.Uuid
  tableNumber Int         @unique @default(1)
  capacity    Int
  orderBills  OrderBill[]

  @@map("table")
}

model OrderBill {
  id           String        @id @unique @default(uuid()) @db.Uuid
  date         DateTime      @default(now())
  total        Float
  client       Client        @relation(fields: [clientId], references: [id])
  clientId     String        @db.Uuid
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.Uuid
  table        Table         @relation(fields: [tableId], references: [id])
  tableId      String        @db.Uuid
  orderDetails OrderDetail[]

  @@map("order_bill")
}

model OrderDetail {
  id          String    @id @unique @default(uuid()) @db.Uuid
  quantity    Int
  unitPrice   Float     @map("unit_price")
  orderBill   OrderBill @relation(fields: [orderBillId], references: [id])
  orderBillId String    @db.Uuid
  dish        Dish      @relation(fields: [dishId], references: [id])
  dishId      String    @db.Uuid

  @@map("order_detail")
}

model Dish {
  id           String        @id @unique @default(uuid()) @db.Uuid
  dishName     String        @unique @db.VarChar(100)
  price        Float         @db.Real
  description  String        @db.Text
  category     Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId   String        @db.Uuid
  dishImages   DishImage[]
  createAt     DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderDetails OrderDetail[]

  @@unique([id, dishName])
  @@index([categoryId])
  @@map("dish")
}

model DishImage {
  id     String @id @unique @default(uuid()) @db.Uuid
  imgUrl String
  dish   Dish   @relation(fields: [dishId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dishId String @db.Uuid

  @@index([dishId])
  @@map("dish_image")
}

model Category {
  id           String @id @unique @default(uuid()) @db.Uuid
  categoryName String @unique @db.VarChar(100)
  dishes       Dish[]

  @@unique([id, categoryName])
  @@map("category")
}
